#!/usr/bin/env python3
"""
Optune key-value adjust driver
(C) 2019, Opsani. All Rights Reserved.
See LICENSE file for license terms

Use:

adjust --version
adjust --info
adjust --query app_name
adjust app_name < settings-file.json

This script requires a configuration file placed at a fixed location (see CONFIG_FILE constant below).
"""
import select
import subprocess

import yaml
from adjust import Adjust

DRIVER_NAME = 'key-value'
DESC = 'Key-value adjust driver for Opsani Optune'
VERSION = '0.0.1'
HAS_CANCEL = False

QUERY_EXEC_FIELD = 'query_exec'
ADJUST_EXEC_FIELD = 'adjust_exec'
DEFAULT_QUERY_EXEC = './query.sh'
DEFAULT_ADJUST_EXEC = './adjust.sh'
CONFIG_FILE = './config.yaml'


def q(s):
    return '"{}"'.format(s)


def run_command(cmd, **kwargs):
    return subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, executable='/bin/bash',
                          **kwargs)


class KeyValue(Adjust):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        config = yaml.load(open('config.yaml', 'r'))
        self.config = config['kv']

    @staticmethod
    def query_input(config):
        _input = []
        for component_name, component in config['components'].items():
            settings = component['settings']
            for setting_name in settings.keys():
                _input.append('{}.{}'.format(component_name, setting_name))
        return yaml.dump(_input, default_flow_style=False)

    @staticmethod
    def adjust_input(data):
        _input = {}
        for component_name, component in data['application']['components'].items():
            for setting_name, setting in component['settings'].items():
                _input['{}.{}'.format(component_name, setting_name)] = setting.get('value')
        return yaml.dump(_input, default_flow_style=False)

    def query(self):
        cmd = self.config.get(QUERY_EXEC_FIELD, DEFAULT_QUERY_EXEC)
        result = run_command(cmd, input=bytes(self.query_input(self.config), 'utf-8'))
        if result.stderr:
            raise Exception(result.stderr.decode('utf-8'))
        output = yaml.load(result.stdout)
        components = self.config['components']
        ret = {}
        for name, comp in components.items():
            component_settings = ret.setdefault(name, {}).setdefault('settings', {})
            for setting_name, setting in comp['settings'].items():
                component_settings[setting_name] = {
                    **setting,
                    'value': output.get('{}.{}'.format(name, setting_name), setting.get('default')),
                }
        return ret

    def adjust(self, data=None):
        stdin = bytes(self.adjust_input(data), 'utf-8')
        cmd = self.config.get(ADJUST_EXEC_FIELD, DEFAULT_ADJUST_EXEC)
        proc = subprocess.Popen(cmd, bufsize=0, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stderr = []
        on_output = [proc.stdout, proc.stderr]
        on_input = [proc.stdin]
        stdout_eof = False
        stderr_eof = False
        while True:
            output_descriptors, input_descriptors, _ = select.select(on_output, on_input, [])
            if stdout_eof and stderr_eof and proc.poll() is not None:  # process exited and no more data
                break
            for descriptor in output_descriptors:
                if descriptor is proc.stderr:
                    line = descriptor.read(4096).decode('UTF-8').strip()
                    if not line:
                        stderr_eof = True
                        continue
                    stderr.append(line)
                if descriptor is proc.stdout:  # h is proc.stdout
                    line = descriptor.readline()
                    if not line:
                        stdout_eof = True
                        continue
                    stdout_line = line.decode('UTF-8').strip()
                    if not stdout_line:
                        continue  # ignore blank lines (shouldn't be output, though)
                    try:
                        stdout = yaml.load(stdout_line)
                        if isinstance(stdout, (int, float)):
                            self.progress = stdout
                            self.print_progress()
                    except Exception:
                        proc.terminate()
                        raise
            if input_descriptors:
                size = min(getattr(select, 'PIPE_BUF', 512), len(stdin))  # write with select.PIPE_BUF bytes or less should not block
                if not size:  # done sending stdin
                    proc.stdin.close()
                    on_input = []
                else:
                    proc.stdin.write(stdin[:size])
                    stdin = stdin[size:]
        if stderr:
            stderr.append('Return code: {}'.format(proc.returncode))
            raise Exception('\n'.join(stderr))


if __name__ == '__main__':
    driver = KeyValue(VERSION, DESC, HAS_CANCEL)
    driver.run()
